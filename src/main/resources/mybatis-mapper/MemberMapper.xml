<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.kosa.nux2.domain.member.mapper.MemberMapper">
    <select id="findById" parameterType="String" resultType="kr.or.kosa.nux2.domain.member.dto.MemberDto$UserDto">
        select
        member_id as memberId,
        member_Name as memberName,
        member_password as memberPassword,
        provider as provider,
        role as role,
        social_token as socialToken,
        status
        from member
        where
        member_id = #{memberId}
    </select>
    <insert id="saveOrUpdateMember" parameterType="map" >
        MERGE INTO member
        USING dual
        ON (member_id = #{memberId})
        WHEN MATCHED THEN
        UPDATE SET
        social_token = #{socialToken}
        WHEN NOT MATCHED THEN
        insert
        (member_id,member_name,provider,role,social_token,status)
        values
        (#{memberId},#{memberName},#{provider},#{role},#{socialToken},#{status})
    </insert>
    <insert id="insertMember" parameterType="kr.or.kosa.nux2.domain.member.dto.MemberDto$SignUpRequest" >
        insert into member (member_id,member_name, member_password, target_expenditure,role)
        values (#{memberId},#{memberName},#{memberPassword},#{targetExpenditure},#{role})
    </insert>
    <select id="isExistMemberId" parameterType="kr.or.kosa.nux2.domain.member.dto.MemberDto$MemberIdRequest" resultType="boolean">
        SELECT CASE
        WHEN EXISTS (
        SELECT 1 FROM member WHERE member_id = #{memberId}
        ) THEN 1
        ELSE 0
        END AS member_id_exists
        FROM DUAL
    </select>
    <select id="selectMemberDetail" parameterType="kr.or.kosa.nux2.domain.member.dto.MemberDto$MemberIdRequest" resultType="kr.or.kosa.nux2.domain.member.dto.MemberDto$ProfileResponse">
        select
            member_id memberId,
            member_name memberName,
            target_expenditure targetExpenditure
        from member
        where
            member_id = #{memberId}
    </select>
    <select id="findMemberNameAndTargetExpenditureByMemberId" parameterType="map" resultType="kr.or.kosa.nux2.domain.member.dto.MemberDto$ProfileResponse">
        select member_name memberName,target_expenditure targetExpenditure
        from member
        where member_id = #{memberId}
    </select>
    <update id="updateTargetExpenditure" parameterType="map">
        update
            member
        set
            target_expenditure = #{targetExpenditure},
            status = 1
        where
            member_id = #{memberId}
    </update>
    <update id="updatePassword" parameterType="map">
        update
        member
        set
        member_password = #{memberPassword}
        where
        member_id = #{memberId}
    </update>
</mapper>